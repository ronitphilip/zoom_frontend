import {
  AgentTraceRecord,
  AgentSplitSkillRecord,
  AgentGroupSummaryRecord,
  SplitSkillDailyRecord,
  SplitSkillSummaryDailyRecord,
  SplitSkillSummaryIntervalRecord,
  SplitSkillCallProfileRecord,
  SplitSkillCallProfileSummary,
  VdnDailyRecord,
  VdnIntervalRecord
} from '@/types/avayaReportTypes';

// Agent Trace sample data
export const agentTraceData: AgentTraceRecord[] = [
  {
    date: '2024-02-20',
    time: '09:00:00',
    sequence: '1',
    state: 'Ready',
    statusReason: 'Available',
    splitSkill: 'Sales',
    queueWaitTime: '00:00:00',
    duration: '00:05:30',
    hold: '00:00:00',
    ring: '00:00:15',
    channelType: 'Voice',
    channelSource: 'Inbound',
    deviceType: 'Phone',
    callingParty: '+1 (555) 123-4567',
    interactionStatus: 'Completed',
    responseTime: '00:00:05',
    mediaCount: '1',
    transferOut: false,
    concurrentCount: '1',
    disposition: 'Sale'
  },
  {
    date: '2024-02-20',
    time: '09:15:00',
    sequence: '2',
    state: 'Ready',
    statusReason: 'Available',
    splitSkill: 'Support',
    queueWaitTime: '00:00:00',
    duration: '00:10:45',
    hold: '00:02:30',
    ring: '00:00:10',
    channelType: 'Voice',
    channelSource: 'Inbound',
    deviceType: 'Phone',
    callingParty: '+1 (555) 234-5678',
    interactionStatus: 'Completed',
    responseTime: '00:00:03',
    mediaCount: '1',
    transferOut: true,
    concurrentCount: '1',
    disposition: 'Resolved'
  },
  {
    date: '2024-02-20',
    time: '09:30:00',
    sequence: '3',
    state: 'Ready',
    statusReason: 'Available',
    splitSkill: 'Sales',
    queueWaitTime: '00:00:00',
    duration: '00:07:20',
    hold: '00:01:15',
    ring: '00:00:12',
    channelType: 'Voice',
    channelSource: 'Inbound',
    deviceType: 'Phone',
    callingParty: '+1 (555) 345-6789',
    interactionStatus: 'Completed',
    responseTime: '00:00:04',
    mediaCount: '1',
    transferOut: false,
    concurrentCount: '1',
    disposition: 'No Sale'
  }
];

// Agent Split/Skill sample data
export const agentSplitSkillData: AgentSplitSkillRecord[] = [
  {
    date: "2024-03-20",
    agentId: "A1001",
    agentName: "John Smith",
    queueId: "Q001",
    queueName: "Customer Support",
    channelType: "Voice",
    channelSource: "Inbound",
    handledCalls: 25,
    missedCalls: 2,
    refusedCalls: 1,
    acdTime: "02:15:30",
    acwTime: "00:45:20",
    outboundCalls: 10,
    outboundTime: "01:30:15",
    firstResponseTime: "00:00:45",
    holdCount: 15,
    holdDuration: "00:20:30",
    transferCount: 5,
    transferDuration: "00:15:45",
    conferenceCount: 3,
    conferenceDuration: "00:10:20"
  },
  {
    date: "2024-03-20",
    agentId: "A1002",
    agentName: "Sarah Johnson",
    queueId: "Q001",
    queueName: "Customer Support",
    channelType: "Voice",
    channelSource: "Inbound",
    handledCalls: 30,
    missedCalls: 1,
    refusedCalls: 0,
    acdTime: "03:20:15",
    acwTime: "00:55:30",
    outboundCalls: 15,
    outboundTime: "02:15:20",
    firstResponseTime: "00:00:30",
    holdCount: 20,
    holdDuration: "00:25:45",
    transferCount: 8,
    transferDuration: "00:20:15",
    conferenceCount: 4,
    conferenceDuration: "00:15:30"
  },
  {
    date: "2024-03-20",
    agentId: "A1003",
    agentName: "Michael Brown",
    queueId: "Q002",
    queueName: "Technical Support",
    channelType: "Voice",
    channelSource: "Inbound",
    handledCalls: 20,
    missedCalls: 3,
    refusedCalls: 2,
    acdTime: "01:45:20",
    acwTime: "00:35:15",
    outboundCalls: 8,
    outboundTime: "01:10:30",
    firstResponseTime: "00:00:55",
    holdCount: 12,
    holdDuration: "00:15:20",
    transferCount: 4,
    transferDuration: "00:12:45",
    conferenceCount: 2,
    conferenceDuration: "00:08:15"
  },
  {
    date: "2024-03-20",
    agentId: "A1004",
    agentName: "Emily Davis",
    queueId: "Q002",
    queueName: "Technical Support",
    channelType: "Voice",
    channelSource: "Inbound",
    handledCalls: 28,
    missedCalls: 2,
    refusedCalls: 1,
    acdTime: "02:55:40",
    acwTime: "00:50:25",
    outboundCalls: 12,
    outboundTime: "01:45:15",
    firstResponseTime: "00:00:40",
    holdCount: 18,
    holdDuration: "00:22:30",
    transferCount: 6,
    transferDuration: "00:18:20",
    conferenceCount: 3,
    conferenceDuration: "00:12:45"
  },
  {
    date: "2024-03-20",
    agentId: "A1005",
    agentName: "David Wilson",
    queueId: "Q003",
    queueName: "Sales Support",
    channelType: "Voice",
    channelSource: "Inbound",
    handledCalls: 35,
    missedCalls: 1,
    refusedCalls: 0,
    acdTime: "03:45:15",
    acwTime: "01:05:30",
    outboundCalls: 20,
    outboundTime: "02:30:45",
    firstResponseTime: "00:00:25",
    holdCount: 25,
    holdDuration: "00:30:15",
    transferCount: 10,
    transferDuration: "00:25:30",
    conferenceCount: 5,
    conferenceDuration: "00:20:15"
  }
];

// Agent Group Summary sample data
export const agentGroupSummaryData: AgentGroupSummaryRecord[] = [
  {
    agentName: "John Smith",
    agentId: "A1001",
    staffedTime: "08:00:00",
    availTime: "06:30:00",
    auxTime: "00:45:00",
    occupiedTime: "07:15:00",
    occupancyPercentage: 90,
    totalHandled: 85,
    inboundHandled: 65,
    outboundHandled: 15,
    digitalHandled: 5,
    concurrentMax: 3,
    avgHandleTime: "00:05:30",
    avgWrapTime: "00:01:15",
    totalAcdTime: "07:45:30",
    totalAcwTime: "01:45:15",
    agentRingTime: "00:15:30",
    totalHoldTime: "00:30:45",
    firstResponseAvg: "00:00:45",
    channelEscalations: 2,
    voiceOccupancy: 85,
    digitalOccupancy: 15
  },
  {
    agentName: "Sarah Johnson",
    agentId: "A1002",
    staffedTime: "08:00:00",
    availTime: "06:15:00",
    auxTime: "00:30:00",
    occupiedTime: "07:30:00",
    occupancyPercentage: 94,
    totalHandled: 95,
    inboundHandled: 75,
    outboundHandled: 15,
    digitalHandled: 5,
    concurrentMax: 4,
    avgHandleTime: "00:04:45",
    avgWrapTime: "00:01:00",
    totalAcdTime: "07:30:15",
    totalAcwTime: "01:35:00",
    agentRingTime: "00:12:45",
    totalHoldTime: "00:25:30",
    firstResponseAvg: "00:00:35",
    channelEscalations: 1,
    voiceOccupancy: 88,
    digitalOccupancy: 12
  },
  {
    agentName: "Michael Brown",
    agentId: "A1003",
    staffedTime: "08:00:00",
    availTime: "06:45:00",
    auxTime: "00:50:00",
    occupiedTime: "07:00:00",
    occupancyPercentage: 88,
    totalHandled: 75,
    inboundHandled: 55,
    outboundHandled: 15,
    digitalHandled: 5,
    concurrentMax: 2,
    avgHandleTime: "00:05:15",
    avgWrapTime: "00:01:30",
    totalAcdTime: "06:45:45",
    totalAcwTime: "01:55:30",
    agentRingTime: "00:18:15",
    totalHoldTime: "00:35:15",
    firstResponseAvg: "00:00:50",
    channelEscalations: 3,
    voiceOccupancy: 82,
    digitalOccupancy: 18
  },
  {
    agentName: "Emily Davis",
    agentId: "A1004",
    staffedTime: "08:00:00",
    availTime: "06:20:00",
    auxTime: "00:40:00",
    occupiedTime: "07:25:00",
    occupancyPercentage: 92,
    totalHandled: 90,
    inboundHandled: 70,
    outboundHandled: 15,
    digitalHandled: 5,
    concurrentMax: 3,
    avgHandleTime: "00:04:55",
    avgWrapTime: "00:01:10",
    totalAcdTime: "07:20:30",
    totalAcwTime: "01:40:45",
    agentRingTime: "00:14:30",
    totalHoldTime: "00:28:15",
    firstResponseAvg: "00:00:40",
    channelEscalations: 2,
    voiceOccupancy: 86,
    digitalOccupancy: 14
  },
  {
    agentName: "David Wilson",
    agentId: "A1005",
    staffedTime: "08:00:00",
    availTime: "06:10:00",
    auxTime: "00:35:00",
    occupiedTime: "07:40:00",
    occupancyPercentage: 96,
    totalHandled: 100,
    inboundHandled: 80,
    outboundHandled: 15,
    digitalHandled: 5,
    concurrentMax: 4,
    avgHandleTime: "00:04:30",
    avgWrapTime: "00:00:55",
    totalAcdTime: "07:15:00",
    totalAcwTime: "01:30:15",
    agentRingTime: "00:10:45",
    totalHoldTime: "00:22:30",
    firstResponseAvg: "00:00:30",
    channelEscalations: 1,
    voiceOccupancy: 90,
    digitalOccupancy: 10
  }
];

// Split/Skill Daily sample data
export const splitSkillDailyData: SplitSkillDailyRecord[] = [
  {
    date: '2024-03-01',
    queueId: 'Q001',
    queueName: 'Sales Support',
    agentName: 'John Smith',
    agentId: 'A001',
    totalOffered: 120,
    totalAnswered: 115,
    abandonedCalls: 5,
    acdTime: '08:30:00',
    acwTime: '01:15:00',
    agentRingTime: '00:45:00',
    avgHandleTime: '00:07:30',
    avgAcwTime: '00:01:30',
    maxHandleTime: '00:15:00',
    holdCount: 8,
    holdTime: '00:20:00',
    transferCount: 3,
    conferenceCount: 2,
    voiceCalls: 100,
    digitalInteractions: 15,
    firstResponseTime: '00:00:45',
    slaCompliance: 95
  },
  {
    date: '2024-03-01',
    queueId: 'Q002',
    queueName: 'Technical Support',
    agentName: 'Sarah Johnson',
    agentId: 'A002',
    totalOffered: 150,
    totalAnswered: 145,
    abandonedCalls: 5,
    acdTime: '07:45:00',
    acwTime: '01:00:00',
    agentRingTime: '00:30:00',
    avgHandleTime: '00:08:15',
    avgAcwTime: '00:01:45',
    maxHandleTime: '00:20:00',
    holdCount: 12,
    holdTime: '00:25:00',
    transferCount: 5,
    conferenceCount: 3,
    voiceCalls: 130,
    digitalInteractions: 20,
    firstResponseTime: '00:00:50',
    slaCompliance: 92
  },
  {
    date: '2024-03-01',
    queueId: 'Q003',
    queueName: 'Customer Service',
    agentName: 'Michael Brown',
    agentId: 'A003',
    totalOffered: 200,
    totalAnswered: 195,
    abandonedCalls: 5,
    acdTime: '09:15:00',
    acwTime: '01:30:00',
    agentRingTime: '00:40:00',
    avgHandleTime: '00:06:45',
    avgAcwTime: '00:01:15',
    maxHandleTime: '00:18:00',
    holdCount: 15,
    holdTime: '00:30:00',
    transferCount: 4,
    conferenceCount: 2,
    voiceCalls: 180,
    digitalInteractions: 20,
    firstResponseTime: '00:00:40',
    slaCompliance: 98
  }
];

// Split/Skill Summary Daily sample data
export const splitSkillSummaryDailyData: SplitSkillSummaryDailyRecord[] = [
  {
    date: "2024-03-01",
    queueId: "Q1001",
    queueName: "Sales Support",
    totalOffered: 120,
    totalHandled: 115,
    abandonedCalls: 5,
    abandonmentRate: 4.17,
    averageSpeedAnswer: "00:01:45",
    maxWaitTime: "00:05:30",
    serviceLevelPercentage: 95.8,
    transferredIn: 8,
    transferredOut: 12,
    averageHandleTime: "00:03:20",
    averageAcwTime: "00:00:45",
    totalTalkTime: "06:25:00",
    totalAcwTime: "01:26:15",
    voiceOffered: 100,
    voiceHandled: 95,
    digitalOffered: 20,
    digitalHandled: 20,
    averageFirstResponse: "00:00:30",
    overflowedCalls: 3
  },
  {
    date: "2024-03-01",
    queueId: "Q1002",
    queueName: "Technical Support",
    totalOffered: 150,
    totalHandled: 145,
    abandonedCalls: 5,
    abandonmentRate: 3.33,
    averageSpeedAnswer: "00:02:15",
    maxWaitTime: "00:07:45",
    serviceLevelPercentage: 92.0,
    transferredIn: 12,
    transferredOut: 15,
    averageHandleTime: "00:05:45",
    averageAcwTime: "00:01:15",
    totalTalkTime: "13:55:00",
    totalAcwTime: "03:01:15",
    voiceOffered: 130,
    voiceHandled: 125,
    digitalOffered: 20,
    digitalHandled: 20,
    averageFirstResponse: "00:00:45",
    overflowedCalls: 5
  },
  {
    date: "2024-03-01",
    queueId: "Q1003",
    queueName: "Customer Service",
    totalOffered: 200,
    totalHandled: 195,
    abandonedCalls: 5,
    abandonmentRate: 2.50,
    averageSpeedAnswer: "00:01:30",
    maxWaitTime: "00:06:15",
    serviceLevelPercentage: 98.5,
    transferredIn: 15,
    transferredOut: 18,
    averageHandleTime: "00:04:30",
    averageAcwTime: "00:01:00",
    totalTalkTime: "14:37:30",
    totalAcwTime: "03:15:00",
    voiceOffered: 180,
    voiceHandled: 175,
    digitalOffered: 20,
    digitalHandled: 20,
    averageFirstResponse: "00:00:35",
    overflowedCalls: 4
  },
  {
    date: "2024-03-01",
    queueId: "Q1004",
    queueName: "Billing Support",
    totalOffered: 80,
    totalHandled: 78,
    abandonedCalls: 2,
    abandonmentRate: 2.50,
    averageSpeedAnswer: "00:01:15",
    maxWaitTime: "00:04:45",
    serviceLevelPercentage: 97.5,
    transferredIn: 5,
    transferredOut: 8,
    averageHandleTime: "00:06:15",
    averageAcwTime: "00:01:30",
    totalTalkTime: "08:07:00",
    totalAcwTime: "01:57:00",
    voiceOffered: 70,
    voiceHandled: 68,
    digitalOffered: 10,
    digitalHandled: 10,
    averageFirstResponse: "00:00:25",
    overflowedCalls: 2
  },
  {
    date: "2024-03-01",
    queueId: "Q1005",
    queueName: "Product Support",
    totalOffered: 90,
    totalHandled: 88,
    abandonedCalls: 2,
    abandonmentRate: 2.22,
    averageSpeedAnswer: "00:01:30",
    maxWaitTime: "00:05:00",
    serviceLevelPercentage: 96.7,
    transferredIn: 6,
    transferredOut: 10,
    averageHandleTime: "00:05:45",
    averageAcwTime: "00:01:15",
    totalTalkTime: "08:26:00",
    totalAcwTime: "01:50:00",
    voiceOffered: 80,
    voiceHandled: 78,
    digitalOffered: 10,
    digitalHandled: 10,
    averageFirstResponse: "00:00:40",
    overflowedCalls: 3
  }
];

// Split/Skill Summary Interval sample data
export const splitSkillSummaryIntervalData: SplitSkillSummaryIntervalRecord[] = Array.from({ length: 8 }).map((_, index) => {
  const hour = 9 + index;
  const formattedHour = hour < 10 ? `0${hour}` : hour;
  
  return {
    time: `${formattedHour}:00-${formattedHour}:30`,
    avgSpeedAns: `0:${5 + Math.floor(Math.random() * 55)}`,
    avgAban: `0:${20 + Math.floor(Math.random() * 60)}`,
    acdCalls: 20 + Math.floor(Math.random() * 50),
    avgAcdTime: `${Math.floor(Math.random() * 5) + 1}:${Math.floor(Math.random() * 60)}`,
    avgAcwTime: `${Math.floor(Math.random() * 2)}:${Math.floor(Math.random() * 60)}`,
    abanCalls: Math.floor(Math.random() * 10),
    maxDelay: `0:${60 + Math.floor(Math.random() * 240)}`,
    flowIn: Math.floor(Math.random() * 15),
    flowOut: Math.floor(Math.random() * 12),
    extnOutCalls: Math.floor(Math.random() * 20),
    avgExtnOutTime: `${Math.floor(Math.random() * 2)}:${Math.floor(Math.random() * 60)}`,
    dequeuedCalls: Math.floor(Math.random() * 8),
    avgTimeToDequeue: `0:${10 + Math.floor(Math.random() * 50)}`,
    percentAcdTime: 60 + Math.floor(Math.random() * 40),
    percentAnsCalls: 80 + Math.floor(Math.random() * 20),
    avgPos: 1 + Math.random() * 4,
    callsPerStaff: 2 + Math.random() * 10,
    pos: 1 + Math.floor(Math.random() * 10)
  };
});

// Split/Skill Call Profile sample data
export const splitSkillCallProfileData: SplitSkillCallProfileRecord[] = [
  { timeInterval: '0-10', acdCalls: 45, abandonedCalls: 2 },
  { timeInterval: '10-20', acdCalls: 32, abandonedCalls: 4 },
  { timeInterval: '20-30', acdCalls: 23, abandonedCalls: 5 },
  { timeInterval: '30-40', acdCalls: 18, abandonedCalls: 6 },
  { timeInterval: '40-50', acdCalls: 12, abandonedCalls: 5 },
  { timeInterval: '50-60', acdCalls: 8, abandonedCalls: 3 },
  { timeInterval: '60-90', acdCalls: 15, abandonedCalls: 7 },
  { timeInterval: '90-120', acdCalls: 9, abandonedCalls: 4 },
  { timeInterval: '120+', acdCalls: 12, abandonedCalls: 9 }
];

export const splitSkillCallProfileSummary: SplitSkillCallProfileSummary = {
  totalAcdCalls: 174,
  avgSpeedAns: '0:28',
  percentAnsCalls: 82.5,
  totalAbanCalls: 45,
  avgAbanTime: '0:58',
  percentAbanCalls: 17.5,
  percentWithinServiceLevel: 68.7
};

// VDN Daily sample data
export const vdnDailyData: VdnDailyRecord[] = Array.from({ length: 7 }).map((_, index) => {
  const day = 10 + index;
  
  return {
    date: `2025-03-${day}`,
    vectorInboundCalls: 150 + Math.floor(Math.random() * 100),
    flowIn: Math.floor(Math.random() * 40),
    calls: 140 + Math.floor(Math.random() * 90),
    avgSpeedAns: `0:${10 + Math.floor(Math.random() * 50)}`,
    avgAcdTime: `${2 + Math.floor(Math.random() * 3)}:${Math.floor(Math.random() * 60)}`,
    avgAcwTime: `0:${30 + Math.floor(Math.random() * 30)}`,
    mainAcdCalls: 100 + Math.floor(Math.random() * 80),
    backupAcdCalls: Math.floor(Math.random() * 40),
    connectTime: `${3 + Math.floor(Math.random() * 4)}:${Math.floor(Math.random() * 60)}:00`,
    avgConnectCalls: Math.floor(Math.random() * 5),
    abanCalls: Math.floor(Math.random() * 25),
    avgAbanTime: `0:${20 + Math.floor(Math.random() * 40)}`,
    percentAban: Math.floor(Math.random() * 15),
    forcedBusyCalls: Math.floor(Math.random() * 10),
    percentBusy: Math.floor(Math.random() * 8),
    forcedDiscCalls: Math.floor(Math.random() * 5),
    flowOut: Math.floor(Math.random() * 20),
    percentFlowOut: Math.floor(Math.random() * 12),
    avgVdnTime: `${Math.floor(Math.random() * 3)}:${Math.floor(Math.random() * 60)}`,
    firstSkillPref: `Skill-${1000 + Math.floor(Math.random() * 3)}`,
    secondSkillPref: `Skill-${1000 + Math.floor(Math.random() * 3)}`,
    thirdSkillPref: `Skill-${1000 + Math.floor(Math.random() * 3)}`
  };
});

// VDN Interval sample data
export const vdnIntervalData: VdnIntervalRecord[] = Array.from({ length: 8 }).map((_, index) => {
  const hour = 9 + index;
  const formattedHour = hour < 10 ? `0${hour}` : hour;
  
  return {
    time: `${formattedHour}:00-${formattedHour}:30`,
    vectorInboundCalls: 20 + Math.floor(Math.random() * 30),
    flowIn: Math.floor(Math.random() * 10),
    calls: 18 + Math.floor(Math.random() * 27),
    avgSpeedAns: `0:${10 + Math.floor(Math.random() * 50)}`,
    avgAcdTime: `${2 + Math.floor(Math.random() * 3)}:${Math.floor(Math.random() * 60)}`,
    avgAcwTime: `0:${30 + Math.floor(Math.random() * 30)}`,
    mainAcdCalls: 15 + Math.floor(Math.random() * 20),
    backupAcdCalls: Math.floor(Math.random() * 8),
    connectTime: `${1 + Math.floor(Math.random() * 2)}:${Math.floor(Math.random() * 60)}:00`,
    avgConnectCalls: Math.floor(Math.random() * 5),
    abanCalls: Math.floor(Math.random() * 6),
    avgAbanTime: `0:${20 + Math.floor(Math.random() * 40)}`,
    percentAban: Math.floor(Math.random() * 15),
    forcedBusyCalls: Math.floor(Math.random() * 3),
    percentBusy: Math.floor(Math.random() * 8),
    forcedDiscCalls: Math.floor(Math.random() * 2),
    flowOut: Math.floor(Math.random() * 5),
    percentFlowOut: Math.floor(Math.random() * 12),
    avgVdnTime: `${Math.floor(Math.random() * 3)}:${Math.floor(Math.random() * 60)}`,
    firstSkillPref: `Skill-${1000 + Math.floor(Math.random() * 3)}`,
    secondSkillPref: `Skill-${1000 + Math.floor(Math.random() * 3)}`,
    thirdSkillPref: `Skill-${1000 + Math.floor(Math.random() * 3)}`
  };
});
